{"entries":[{"timestamp":1726119756287,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":229,"start2":229,"length1":36,"length2":31}]}]},{"timestamp":1726119759093,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":244,"start2":244,"length1":17,"length2":21}]}]},{"timestamp":1726127176657,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"sgp30.ts\""],[0,"\n   "]],"start1":216,"start2":216,"length1":28,"length2":8}]},{"type":"added","filename":"sgp30.ts","value":""}]},{"timestamp":1726127197154,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_forever"],[1,"pxt-on-start"],[0,"\" x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":87,"start2":87,"length1":33,"length2":33},{"diffs":[[0,"ice_"],[-1,"button_event\" x=\"55\" y=\"141\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"IML_SGP30_getCO2\"></block></value></block></statement"],[1,"forever\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":143,"start2":143,"length1":281,"length2":31}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_SGP30.getCO2())\n})\n"],[0,"basi"]],"start1":0,"start2":0,"length1":94,"length2":4}]},{"type":"edited","filename":"sgp30.ts","patch":[{"diffs":[[-1,"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"SGP30\"\nnamespace IML_SGP30 {\n\n    let CO2 = 0\n    let eCO2 = 0\n    let SGP30_ADDRESS = 0x58\n    let INIT_AIR_QUALITY = 0x2008\n    let MEASURE_AIR_QUALITY = 0x2003\n\n    //% block\n    //% block=\"二酸化炭素\"\n    //% weight=100    \n    export function getCO2(): number {\n        return measureAirQuality()\n    }\n\n    // SGP30を初期化する関数\n    function initializeSGP30() {\n        let buffer = pins.createBuffer(2)\n        buffer[0] = (INIT_AIR_QUALITY >> 8) & 0xFF\n        buffer[1] = INIT_AIR_QUALITY & 0xFF\n        pins.i2cWriteBuffer(SGP30_ADDRESS, buffer)\n        basic.pause(10) // 初期化待ち時間\n    }\n\n    // CO2とTVOCデータを取得する関数\n    function measureAirQuality() : number{\n        let buffer = pins.createBuffer(2)\n        buffer[0] = (MEASURE_AIR_QUALITY >> 8) & 0xFF\n        buffer[1] = MEASURE_AIR_QUALITY & 0xFF\n        pins.i2cWriteBuffer(SGP30_ADDRESS, buffer)\n\n        basic.pause(20) // 測定のための待ち時間\n\n        let result = pins.i2cReadBuffer(SGP30_ADDRESS, 6)\n\n        // eCO2データ（結果の上位バイトと下位バイトの結合）\n        eCO2 = (result[0] << 8) | result[1]\n        return eCO2\n\n        // TVOCデータも同様に取得可能\n        // let TVOC = (result[3] << 8) | result[4]\n\n        // デバッグ用にシリアルモニタに表示\n        // serial.writeLine(\"eCO2: \" + eCO2 + \" ppm, TVOC: \" + TVOC + \" ppb\")\n    }\n\n    initializeSGP30()\n}\n"]],"start1":0,"start2":0,"length1":1339,"length2":0}]}]},{"timestamp":1726127784235,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"sgp30.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    // I2C 書き込み関数\n    function i2cWrite(command: number) {\n        pins.i2cWriteNumber(I2C_ADDR, command, NumberFormat.UInt16BE)\n    }\n\n    // I2C 読み取り関数\n    function i2cRead(num: number): Buffer {\n        return pins.i2cReadBuffer(I2C_ADDR, num)\n    }\n\n"],[0,"    "]],"start1":370,"start2":370,"length1":262,"length2":8}]}]},{"timestamp":1726128486541,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"sgp30.ts","patch":[{"diffs":[[0,"    let "],[-1,"I"],[1,"SGP30"],[0,"_ADDRESS"]],"start1":133,"start2":133,"length1":17,"length2":21}]}]},{"timestamp":1726128514535,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"sgp30.ts","patch":[{"diffs":[[0,"   let I"],[-1,"2C"],[0,"_ADDR"],[1,"ESS"],[0," = 0x58\n"]],"start1":134,"start2":134,"length1":23,"length2":24},{"diffs":[[0,"ty()\n    }\n\n"],[1,"    // I2C 書き込み関数\n    function i2cWrite(command: number) {\n        pins.i2cWriteNumber(I2C_ADDR, command, NumberFormat.UInt16BE)\n    }\n\n    // I2C 読み取り関数\n    function i2cRead(num: number): Buffer {\n        return pins.i2cReadBuffer(I2C_ADDR, num)\n    }\n\n"],[0,"    // SGP30"]],"start1":358,"start2":358,"length1":24,"length2":278},{"diffs":[[0,"P30() {\n"],[-1,"//"],[0,"        "]],"start1":670,"start2":670,"length1":18,"length2":16},{"diffs":[[0,"createBuffer(2)\n"],[-1,"//"],[0,"        buffer[0"]],"start1":704,"start2":704,"length1":34,"length2":32},{"diffs":[[0,"TY >> 8) & 0xFF\n"],[-1,"//"],[0,"        buffer[1"]],"start1":755,"start2":755,"length1":34,"length2":32},{"diffs":[[0,"_QUALITY & 0xFF\n"],[-1,"//"],[0,"        pins.i2c"]],"start1":799,"start2":799,"length1":34,"length2":32},{"diffs":[[0,"WriteBuffer("],[-1,"I2C"],[1,"SGP30"],[0,"_ADDR"],[1,"ESS"],[0,", buffer)\n  "]],"start1":831,"start2":831,"length1":32,"length2":37},{"diffs":[[0,"er)\n"],[-1,"        pins.i2cWriteNumber(I2C_ADDR, INIT_AIR_QUALITY, NumberFormat.UInt16BE)\n"],[0,"    "]],"start1":862,"start2":862,"length1":87,"length2":8},{"diffs":[[0,"number{\n"],[-1,"//"],[0,"        "]],"start1":969,"start2":969,"length1":18,"length2":16},{"diffs":[[0,"ffer(2)\n"],[-1,"//"],[0,"        "]],"start1":1011,"start2":1011,"length1":18,"length2":16},{"diffs":[[0,"TY >> 8) & 0xFF\n"],[-1,"//"],[0,"        buffer[1"]],"start1":1057,"start2":1057,"length1":34,"length2":32},{"diffs":[[0," & 0xFF\n"],[-1,"//"],[0,"        "]],"start1":1112,"start2":1112,"length1":18,"length2":16},{"diffs":[[0,"eBuffer("],[-1,"I2C"],[1,"SGP30"],[0,"_ADDR"],[1,"ESS"],[0,", buffer"]],"start1":1140,"start2":1140,"length1":24,"length2":29},{"diffs":[[0,"fer)"],[-1,"\n        pins.i2cWriteNumber(I2C_ADDR, MEASURE_AIR_QUALITY, NumberFormat.UInt16BE)"],[0,"\n\n  "]],"start1":1166,"start2":1166,"length1":90,"length2":8},{"diffs":[[0,"dBuffer("],[-1,"I2C"],[1,"SGP30"],[0,"_ADDR"],[1,"ESS"],[0,", 6)\n\n  "]],"start1":1243,"start2":1243,"length1":24,"length2":29},{"diffs":[[0,"\n       "],[1," //"],[0," serial."]],"start1":1479,"start2":1479,"length1":16,"length2":19},{"diffs":[[0," + \" ppm"],[1,", TVOC: \" + TVOC + \" ppb"],[0,"\")\n    }"]],"start1":1523,"start2":1523,"length1":16,"length2":40},{"diffs":[[0,")\n    }\n"],[-1," "],[0,"\n    ini"]],"start1":1556,"start2":1556,"length1":17,"length2":16}]}]},{"timestamp":1726129064125,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"sgp30.ts","patch":[{"diffs":[[0," = 0x200"],[-1,"3"],[1,"8"],[0,"\n    let"]],"start1":181,"start2":181,"length1":17,"length2":17},{"diffs":[[0," = 0x200"],[-1,"8"],[1,"3"],[0,"\n\n    //"]],"start1":218,"start2":218,"length1":17,"length2":17},{"diffs":[[0,"0() "],[-1,"\n    {\n        pins.i2cWriteNumber(I2C_ADDR, INIT_AIR_QUALITY, NumberFormat.UInt16BE)\n        basic.pause(10) // 初期化待ち時間\n    }\n\n    // CO2とTVOCデータを取得する関数\n    function measureAirQuality() : number\n    {"],[1,"{\n//        let buffer = pins.createBuffer(2)\n//        buffer[0] = (INIT_AIR_QUALITY >> 8) & 0xFF\n//        buffer[1] = INIT_AIR_QUALITY & 0xFF\n//        pins.i2cWriteBuffer(I2C_ADDR, buffer)\n        pins.i2cWriteNumber(I2C_ADDR, INIT_AIR_QUALITY, NumberFormat.UInt16BE)\n        basic.pause(10) // 初期化待ち時間\n    }\n\n    // CO2とTVOCデータを取得する関数\n    function measureAirQuality() : number{\n//        let buffer = pins.createBuffer(2)\n//        buffer[0] = (MEASURE_AIR_QUALITY >> 8) & 0xFF\n//        buffer[1] = MEASURE_AIR_QUALITY & 0xFF\n//        pins.i2cWriteBuffer(I2C_ADDR, buffer)"],[0,"\n   "]],"start1":417,"start2":417,"length1":209,"length2":587},{"diffs":[[0,"lt ="],[-1," pins.createBuffer(6)\n        result ="],[0," pin"]],"start1":1139,"start2":1139,"length1":46,"length2":8},{"diffs":[[0,"urn eCO2"],[1,"\n\n        // TVOCデータも同様に取得可能\n        // let TVOC = (result[3] << 8) | result[4]\n\n        // デバッグ用にシリアルモニタに表示\n        serial.writeLine(\"eCO2: \" + eCO2 + \" ppm\")"],[0,"\n    }\n "]],"start1":1270,"start2":1270,"length1":16,"length2":175}]}]},{"timestamp":1726129606008,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start\" id=\"1t{x0{[ifn/dT1p~)TXu\" x=\"20\" y=\"20\""],[1,"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_button_event\" x=\"55\" y=\"141\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"IML_SGP30_getCO2\"></block></value></block></statement"],[0,"></b"]],"start1":87,"start2":87,"length1":61,"length2":337}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_SGP30.getCO2())\n})\nbasic.forever(function () {\n\t\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":123}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":244,"start2":244,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1726119756286,"editorVersion":"7.0.40","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"題名未設定\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1726127176657,"editorVersion":"7.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"題名未設定\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1726128979873,"editorVersion":"7.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_button_event\" x=\"55\" y=\"141\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"IML_SGP30_getCO2\"></block></value></block></statement></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_SGP30.getCO2())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","sgp30.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"SGP30\"\nnamespace IML_SGP30 {\n\n    let CO2 = 0\n    let eCO2 = 0\n    let I2C_ADDR = 0x58\n    let INIT_AIR_QUALITY = 0x2008\n    let MEASURE_AIR_QUALITY = 0x2003\n\n    //% block\n    //% block=\"二酸化炭素\"\n    //% weight=100    \n    export function getCO2(): number {\n        return measureAirQuality()\n    }\n\n    // SGP30を初期化する関数\n    function initializeSGP30() {\n//        let buffer = pins.createBuffer(2)\n//        buffer[0] = (INIT_AIR_QUALITY >> 8) & 0xFF\n//        buffer[1] = INIT_AIR_QUALITY & 0xFF\n//        pins.i2cWriteBuffer(I2C_ADDR, buffer)\n        pins.i2cWriteNumber(I2C_ADDR, INIT_AIR_QUALITY, NumberFormat.UInt16BE)\n        basic.pause(10) // 初期化待ち時間\n    }\n\n    // CO2とTVOCデータを取得する関数\n    function measureAirQuality() : number{\n        let buffer = pins.createBuffer(2)\n        buffer[0] = (MEASURE_AIR_QUALITY >> 8) & 0xFF\n        buffer[1] = MEASURE_AIR_QUALITY & 0xFF\n        pins.i2cWriteBuffer(I2C_ADDR, buffer)\n\n        basic.pause(20) // 測定のための待ち時間\n\n        let result = pins.i2cReadBuffer(I2C_ADDR, 6)\n\n        // eCO2データ（結果の上位バイトと下位バイトの結合）\n        eCO2 = (result[0] << 8) | result[1]\n        return eCO2\n\n        // TVOCデータも同様に取得可能\n        // let TVOC = (result[3] << 8) | result[4]\n\n        // デバッグ用にシリアルモニタに表示\n        // serial.writeLine(\"eCO2: \" + eCO2 + \" ppm, TVOC: \" + TVOC + \" ppb\")\n    }\n \n    initializeSGP30()\n}\n","pxt.json":"{\n    \"name\": \"題名未設定\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"sgp30.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1726129750129}